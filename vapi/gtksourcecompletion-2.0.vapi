/* gtksourcecompletion-2.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gsc", lower_case_cprefix = "gsc_")]
namespace Gsc {
	[CCode (cheader_filename = "gtksourcecompletion/gsc-completion.h")]
	public class Completion : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		public void filter_proposals (Gsc.CompletionFilterFunc func);
		public void finish_completion ();
		public bool get_active ();
		public unowned Gsc.Trigger get_active_trigger ();
		public unowned Gtk.Widget get_bottom_bar ();
		public static unowned Gsc.Completion get_from_view (Gtk.TextView view);
		public unowned Gsc.Info get_info_widget ();
		public unowned Gsc.Provider get_provider (string prov_name);
		public unowned Gsc.Trigger get_trigger (string trigger_name);
		public unowned Gtk.TextView get_view ();
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Completion (Gtk.TextView view);
		public bool register_provider (Gsc.Provider provider, Gsc.Trigger trigger);
		public bool register_trigger (Gsc.Trigger trigger);
		public void set_active (bool active);
		public bool trigger_event (Gsc.Trigger trigger);
		public bool unregister_provider (Gsc.Provider provider, Gsc.Trigger trigger);
		public bool unregister_trigger (Gsc.Trigger trigger);
		public bool active { get; set; }
		[NoAccessorMethod]
		public bool manage_completion_keys { get; set; }
		[NoAccessorMethod]
		public bool remember_info_visibility { get; set; }
		[NoAccessorMethod]
		public bool select_on_show { get; set; }
		public virtual signal bool display_info (void* proposal);
		public virtual signal bool proposal_selected (void* proposal);
	}
	[Compact]
	[CCode (cheader_filename = "gtksourcecompletion/gsc-completion.h")]
	public class CompletionPage {
		public weak string name;
		public weak Gsc.Tree tree;
	}
	[CCode (cheader_filename = "gtksourcecompletion/gsc-info.h")]
	public class Info : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		public unowned Gtk.Widget get_custom ();
		public void move_to_cursor (Gtk.TextView view);
		[CCode (has_construct_function = false)]
		public Info ();
		public void set_adjust_height (bool adjust, int max_height);
		public void set_adjust_width (bool adjust, int max_width);
		public void set_custom (Gtk.Widget custom_widget);
		public void set_markup (string markup);
		public virtual signal void show_info ();
	}
	[CCode (cheader_filename = "gtksourcecompletion/gsc-proposal.h")]
	public class Proposal : GLib.Object {
		public unowned Gdk.Pixbuf get_icon ();
		public virtual unowned string get_info ();
		public unowned string get_label ();
		public unowned string get_page_name ();
		[CCode (has_construct_function = false)]
		public Proposal (string label, string info, Gdk.Pixbuf icon);
		public void set_page_name (string page_name);
		[NoAccessorMethod]
		public void* icon { get; set; }
		[NoAccessorMethod]
		public string info { owned get; set; }
		[NoAccessorMethod]
		public string label { owned get; set; }
		public string page_name { get; set; }
	}
	[Compact]
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public class Tree {
		public bool filter_active;
		public void* filter_data;
		public weak Gsc.CompletionFilterFunc filter_func;
		public weak Gtk.ListStore list_store;
		public weak Gtk.TreeModelFilter model_filter;
		public weak Gtk.TreeView treeview;
	}
	[CCode (cheader_filename = "gtksourcecompletion/gsc-trigger-autowords.h")]
	public class TriggerAutowords : GLib.Object, Gsc.Trigger {
		[CCode (has_construct_function = false)]
		public TriggerAutowords (Gsc.Completion completion);
		public void set_delay (uint delay);
		[NoAccessorMethod]
		public int delay { get; set; }
		[NoAccessorMethod]
		public int min_len { get; set; }
	}
	[CCode (cheader_filename = "gtksourcecompletion/gsc-trigger-customkey.h")]
	public class TriggerCustomkey : GLib.Object, Gsc.Trigger {
		[CCode (has_construct_function = false)]
		public TriggerCustomkey (Gsc.Completion completion, string trigger_name, string keys);
		public void set_keys (string keys);
	}
	[CCode (cheader_filename = "gtksourcecompletion/gsc-provider.h")]
	public interface Provider {
		public abstract void finish ();
		public abstract unowned string get_name ();
		public abstract GLib.List<Gsc.Proposal> get_proposals (Gsc.Trigger trigger);
	}
	[CCode (cheader_filename = "gtksourcecompletion/gsc-trigger.h")]
	public interface Trigger {
		public abstract bool activate ();
		public abstract bool deactivate ();
		public abstract unowned string get_name ();
	}
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public delegate bool CompletionFilterFunc (Gsc.Proposal proposal);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-popup.h")]
	public const string DEFAULT_PAGE;
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public const string TRIGGER_AUTOWORDS_NAME;
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public const string USER_REQUEST_TRIGGER_NAME;
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static bool char_is_separator (unichar ch);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static unowned string clear_word (string word);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static unowned string compute_line_indentation (Gtk.TextView view, Gtk.TextIter cur);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static void get_cursor_pos (Gtk.TextView text_view, int x, int y);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static unowned string get_last_word (Gtk.TextView text_view);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static unowned string get_last_word_and_iter (Gtk.TextView text_view, Gtk.TextIter start_word, Gtk.TextIter end_word);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static unowned string get_last_word_cleaned (Gtk.TextView text_view);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static unowned string get_text_with_indent (string content, string indent);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static void get_window_position_center_parent (Gtk.Window window, Gtk.Widget parent, int x, int y);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static void get_window_position_center_screen (Gtk.Window window, int x, int y);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static bool get_window_position_in_cursor (Gtk.Window window, Gtk.TextView view, int x, int y, bool resized);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static unowned string gsv_get_text (Gtk.TextView text_view);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static void insert_text_with_indent (Gtk.TextView view, string text);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static bool is_valid_word (string current_word, string completion_word);
	[CCode (cheader_filename = "gtksourcecompletion/gsc-utils.h")]
	public static void replace_actual_word (Gtk.TextView text_view, string text);
}
