diff --git a/afrodite/afroditetest.vala b/afrodite/afroditetest.vala
index 00ad0f2..f6dba52 100644
--- a/afrodite/afroditetest.vala
+++ b/afrodite/afroditetest.vala
@@ -118,7 +118,7 @@ public class AfroditeTest.Application : Object {
 					var source = ast.lookup_source_file (option_visible_symbols);
 					if (source != null) {
 						// get the source node at this position
-						var s = ast.get_symbol_for_source_and_position (source, option_line, option_column);
+						var s = ast.lookup_symbol_with_source_at (source, option_line, option_column);
 						if (s != null) {
 							Vala.List<Symbol> syms = null;
 							syms = ast.lookup_visible_symbols_from_symbol (s, option_filter);
@@ -140,39 +140,37 @@ public class AfroditeTest.Application : Object {
 					options.access = Afrodite.SymbolAccessibility.ANY;
 					options.binding = Afrodite.MemberBinding.ANY;
 
-					QueryResult sym = null;
-					sym = ast.get_symbol_type_for_name_and_path (options, option_symbol_name, option_files[0], option_line, option_column);
+					Symbol sym = null;
+					sym = ast.lookup_symbol_type_with_name_and_filename_at (options, option_symbol_name, option_files[0], option_line, option_column);
 					print ("The type for '%s' is: ", option_symbol_name);
-					if (!sym.is_empty) {
-						foreach (ResultItem item in sym.children) {
-							print ("%s\n     Childs:\n", Utils.unescape_xml_string (item.symbol.description));
-							if (item.symbol.has_children) {
-								int count = 0;
-								// print an excerpt of the child symbols
-								foreach (var child in item.symbol.children) {
-									print ("          %s\n", Utils.unescape_xml_string (child.description));
-									count++;
-									if (count == 6) {
-										print ("          ......\n");
-										break;
-									}
+					if (sym != null) {
+						print ("%s\n     Childs:\n", Utils.unescape_xml_string (sym.description));
+						if (sym.has_children) {
+							int count = 0;
+							// print an excerpt of the child symbols
+							foreach (var child in sym.children) {
+								print ("          %s\n", Utils.unescape_xml_string (child.description));
+								count++;
+								if (count == 6) {
+									print ("          ......\n");
+									break;
 								}
-								if (count < 6 && item.symbol.has_base_types) {
-									foreach (var base_item in item.symbol.base_types) {
-										if (base_item.unresolved || !base_item.symbol.has_children)
-											continue;
-
-										foreach (var child in base_item.symbol.children) {
-											print ("          %s\n", Utils.unescape_xml_string (child.description));
-											count++;
-											if (count == 6)
-												break;
-										}
+							}
+							if (count < 6 && sym.has_base_types) {
+								foreach (var base_item in sym.base_types) {
+									if (base_item.unresolved || !base_item.symbol.has_children)
+										continue;
 
-										if (count == 6) {
-											print ("          ......\n");
+									foreach (var child in base_item.symbol.children) {
+										print ("          %s\n", Utils.unescape_xml_string (child.description));
+										count++;
+										if (count == 6)
 											break;
-										}
+									}
+
+									if (count == 6) {
+										print ("          ......\n");
+										break;
 									}
 								}
 							}
diff --git a/afrodite/ast.vala b/afrodite/ast.vala
index 1118397..efa10cf 100644
--- a/afrodite/ast.vala
+++ b/afrodite/ast.vala
@@ -163,41 +163,31 @@ namespace Afrodite
 			source_files.remove (source);
 		}
 		
-		public Symbol? lookup_symbol_at (string filename, int line, int column)
+		public Symbol? lookup_symbol_with_filename_at (string filename, int line, int column)
 		{
 			var source = lookup_source_file (filename);
 			if (source == null || !source.has_symbols)
 				return null;
 			
-			Symbol sym = get_symbol_for_source_and_position (source, line, column);
+			Symbol sym =  lookup_symbol_with_source_at (source, line, column);
 			return sym;
 		}
 
-		public QueryResult get_symbol_for_name_and_path (QueryOptions options, 
-			string symbol_qualified_name, string path, int line, int column)
+		public Symbol? lookup_symbol_with_name_and_filename_at (QueryOptions options, 
+			string symbol_name, string filename, int line, int column)
 		{
-			var result = new Afrodite.QueryResult ();
-			var symbol = get_symbol_or_type_for_name_and_path (LookupMode.Symbol, options.binding, options, symbol_qualified_name, path, line, column);
-			if (symbol != null) {
-				var item = result.new_result_item (null, symbol);
-				result.add_result_item (item);
-			}
+			var result = lookup_symbol_or_type_with_name_and_filename_at (LookupMode.Symbol, options.binding, options, symbol_name, filename, line, column);
 			return result;
 		}
 	
-		public QueryResult get_symbol_type_for_name_and_path (QueryOptions options, 
-			string symbol_qualified_name, string path, int line, int column)
+		public Symbol? lookup_symbol_type_with_name_and_filename_at (QueryOptions options, 
+			string symbol_name, string filename, int line, int column)
 		{
-			var result = new Afrodite.QueryResult ();
-			var symbol = get_symbol_or_type_for_name_and_path (LookupMode.Type, options.binding, options, symbol_qualified_name, path, line, column);
-			if (symbol != null) {
-				var item = result.new_result_item (null, symbol);
-				result.add_result_item (item);
-			}
+			var result = lookup_symbol_or_type_with_name_and_filename_at (LookupMode.Type, options.binding, options, symbol_name, filename, line, column);
 			return result;
 		}
 
-		private Symbol? get_symbol_or_type_for_name_and_path (LookupMode mode, MemberBinding binding, QueryOptions options, string symbol_qualified_name, string path, int line, int column)
+		private Symbol? lookup_symbol_or_type_with_name_and_filename_at (LookupMode mode, MemberBinding binding, QueryOptions options, string symbol_qualified_name, string path, int line, int column)
 		{
 			var source = lookup_source_file (path);
 			if (source == null || !source.has_symbols) {
@@ -205,7 +195,7 @@ namespace Afrodite
 				return null;
 			}
 			
-			Symbol sym = get_symbol_for_source_and_position (source, line, column);
+			Symbol sym = lookup_symbol_with_source_at (source, line, column);
 			if (sym != null) {
 				string[] parts = symbol_qualified_name.split (".");
 				// change the scope of symbol search
@@ -269,7 +259,7 @@ namespace Afrodite
 				return sym;
 		}
 				
-		public QueryResult get_symbols_for_path (QueryOptions options, string path)
+		private QueryResult get_symbols_for_path (QueryOptions options, string path)
 		{
 			var result = new QueryResult ();
 			var first = result.new_result_item (null, _root);
@@ -603,7 +593,7 @@ namespace Afrodite
 			return null;
 		}
 
-		public Symbol? get_symbol_for_source_and_position (SourceFile source, int line, int column)
+		public Symbol? lookup_symbol_with_source_at (SourceFile source, int line, int column)
 		{
 			Symbol result = null;
 			SourceReference result_sr = null;
diff --git a/afrodite/symbolresolver.vala b/afrodite/symbolresolver.vala
index 29e3b5e..ea6b153 100644
--- a/afrodite/symbolresolver.vala
+++ b/afrodite/symbolresolver.vala
@@ -164,66 +164,6 @@ namespace Afrodite
 				}
 			}
 
-			/*
-			// optimization: first resolve in a direct lookup (just for simple types)
-			if (res == null) {
-				string[] tmp = type.type_name.split (".", 2);
-				var s = _ast.root.lookup_child (tmp[0]);
-				if (s != null) {
-					if (tmp.length > 1) {
-						// search for the remaining part
-						s = Ast.lookup_symbol (tmp[1], s, ref parent, Afrodite.CompareMode.EXACT);
-						if (s != null && s != symbol) {
-							res = s;
-						}
-					} else {
-						res = s;
-					}
-				}
-			}
-
-			// resolve symbol
-			//    first lookup: child symbols eg. MyInnerClass.MyEnum.VALUE
-			//    after lookup: in parent symbols
-			var curr_parent = symbol;
-			while (res == null && curr_parent != null) {
-				if (curr_parent.has_children) {
-					var s = Ast.lookup_symbol (type.type_name, curr_parent, ref parent, Afrodite.CompareMode.EXACT);
-					if (s != null && s != symbol) {
-						res = s;
-					}
-				}
-				curr_parent = curr_parent.parent;
-			}
-
-			if (res == null) {
-				// lookup in using directives
-				if (symbol.has_source_references) {
-					foreach (SourceReference reference in symbol.source_references) {
-						var file = reference.file;
-						if (!file.has_using_directives) {
-							continue;
-						}
-					
-						foreach (DataType using_directive in file.using_directives) {
-							if (using_directive.unresolved)
-								continue;
-
-							var s = Ast.lookup_symbol (type.type_name, using_directive.symbol, ref parent, Afrodite.CompareMode.EXACT);
-							if (s != null && s != symbol) {
-								res = s;
-								break;
-							}
-						}
-					
-						if (res != null) {
-							break; // symbol.source_references
-						}
-					}
-				}
-			}
-			*/
-
 			if (res != null) {
 				if (type.has_generic_types) {
 					if (res.has_generic_type_arguments
diff --git a/vtg/vtgsymbolcompletionprovider.vala b/vtg/vtgsymbolcompletionprovider.vala
index eb343fd..e4b83a9 100644
--- a/vtg/vtgsymbolcompletionprovider.vala
+++ b/vtg/vtgsymbolcompletionprovider.vala
@@ -514,25 +514,21 @@ namespace Vtg
 			return strcmp (a.get_label (), b.get_label ());
 		}
 
-		private void transform_result (Afrodite.QueryOptions? options, Afrodite.QueryResult? result)
+		private void transform_result (Afrodite.QueryOptions? options, Afrodite.Symbol? symbol)
 		{
 			_prealloc_index = 0;
 			_proposals = new GLib.List<Gtk.SourceCompletionItem> ();
 			var visited_interfaces = new Vala.ArrayList<Symbol> ();
 			
-			if (result != null && !result.is_empty) {
+			if (symbol != null) {
 				options.dump_settings ();
 				
-				foreach (ResultItem item in result.children) {
-					var symbol = item.symbol;
-
-					if (options == null || symbol.check_options (options)) {
-						if (symbol.has_children) {
-							append_symbols (options, symbol.children);
-						}
-						
-						append_base_type_symbols (options, symbol, visited_interfaces);
+				if (options == null || symbol.check_options (options)) {
+					if (symbol.has_children) {
+						append_symbols (options, symbol.children);
 					}
+					
+					append_base_type_symbols (options, symbol, visited_interfaces);
 				}
 			}
 		}
@@ -611,7 +607,7 @@ namespace Vtg
 
 			get_current_line_and_column (out line, out col);
 			if (_completion.try_acquire_ast (out ast, retry_count)) {
-				symbol = ast.lookup_symbol_at (name, line, col);
+				symbol = ast.lookup_symbol_with_filename_at (name, line, col);
 				_completion.release_ast (ast);
 			}
 
@@ -657,7 +653,7 @@ namespace Vtg
 			Afrodite.Symbol? symbol = null;
 			
 			if (_completion.try_acquire_ast (out ast, retry_count)) {
-				Afrodite.QueryResult? result = null;
+				Afrodite.Symbol? result = null;
 				Afrodite.QueryOptions options = this.get_options_for_line (text, is_assignment, is_creation);
 				
 				if (word == symbol_name)
@@ -665,14 +661,13 @@ namespace Vtg
 				else
 					result = get_symbol_type_for_name (options, ast, first_part, null,  line, col);
 					
-				if (result != null && !result.is_empty) {
-					var first = result.children.get (0);
+				if (result != null) {
 					if (word == symbol_name) {
-						symbol = first.symbol;
+						symbol = result;
 					} else {
-						symbol = get_symbol_for_name_in_children (symbol_name, first.symbol);
+						symbol = get_symbol_for_name_in_children (symbol_name, result);
 						if (symbol == null)
-							symbol =  get_symbol_for_name_in_base_types (symbol_name, first.symbol);
+							symbol =  get_symbol_for_name_in_base_types (symbol_name, result);
 					}
 				}
 				_completion.release_ast (ast);
@@ -751,7 +746,7 @@ namespace Vtg
 			if (!StringUtils.is_null_or_empty (word) 
 			    && _completion.try_acquire_ast (out ast)) {
 			        QueryOptions options = get_options_for_line (text, is_assignment, is_creation);
-				Afrodite.QueryResult result = null;
+				Afrodite.Symbol result = null;
 				int line, col;
 
 				get_current_line_and_column (out line, out col);
@@ -793,7 +788,7 @@ namespace Vtg
 					int line, column;
 					get_current_line_and_column (out line, out column);
 					
-					var s = ast.get_symbol_for_source_and_position (source, line, column);
+					var s = ast.lookup_symbol_with_source_at (source, line, column);
 					if (s != null) {
 						results = ast.lookup_visible_symbols_from_symbol (s, word, mode, CaseSensitiveness.CASE_SENSITIVE);
 					}
@@ -824,19 +819,17 @@ namespace Vtg
 			return false;
 		}
 		
-		private Afrodite.QueryResult? get_symbol_type_for_name (QueryOptions options, Afrodite.Ast ast, string word, string? whole_line, int line, int column)
+		private Afrodite.Symbol? get_symbol_type_for_name (QueryOptions options, Afrodite.Ast ast, string word, string? whole_line, int line, int column)
 		{
-			Afrodite.QueryResult result = null;
-			result = ast.get_symbol_type_for_name_and_path (options, word, _sb.path, line, column);
-			Utils.trace ("symbol matched %d", result.children.size);
+			var result = ast.lookup_symbol_type_with_name_and_filename_at (options, word, _sb.path, line, column);
+			Utils.trace ("symbol matched %s", result != null ? result.fully_qualified_name : "(null)");
 			return result;
 		}
 
-		private Afrodite.QueryResult? get_symbol_for_name (QueryOptions options, Afrodite.Ast ast,string word, string? whole_line, int line, int column)
+		private Afrodite.Symbol? get_symbol_for_name (QueryOptions options, Afrodite.Ast ast,string word, string? whole_line, int line, int column)
 		{
-			Afrodite.QueryResult result = null;
-			result = ast.get_symbol_for_name_and_path (options, word, _sb.path, line, column);
-			
+			var result = ast.lookup_symbol_with_name_and_filename_at (options, word, _sb.path, line, column);
+			Utils.trace ("symbol matched %s", result != null ? result.fully_qualified_name : "(null)");
 			return result;
 		}
 	}
