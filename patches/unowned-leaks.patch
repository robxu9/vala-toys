diff --git a/afrodite/ast.vala b/afrodite/ast.vala
index f81627f..2d890c1 100644
--- a/afrodite/ast.vala
+++ b/afrodite/ast.vala
@@ -49,7 +49,7 @@ namespace Afrodite
 			return result;
 		}
 		
-		internal static Symbol? lookup_symbol (string qualified_name, Vala.List<Symbol> symbols, 
+		internal static Symbol? lookup_symbol (string qualified_name, Vala.List<unowned Symbol> symbols, 
 			out Symbol? parent,  CompareMode mode,
 			SymbolAccessibility access = SymbolAccessibility.ANY, MemberBinding binding = MemberBinding.ANY)
 		{
@@ -58,7 +58,7 @@ namespace Afrodite
 		
 			parent = null;
 			foreach (Symbol symbol in symbols) {
-				//print ("  Looking for %s: %s in %s\n", fully_qualified_name, name, symbol.fully_qualified_name);
+				//Utils.trace ("  Looking for %s: %s in %s\n", qualified_name, name, symbol.fully_qualified_name);
 				
 				if (compare_symbol_names (symbol.name, name, mode)
 				    && (symbol.access & access) != 0
diff --git a/afrodite/astdumper.vala b/afrodite/astdumper.vala
index 0809db2..11638ba 100644
--- a/afrodite/astdumper.vala
+++ b/afrodite/astdumper.vala
@@ -130,7 +130,7 @@ namespace Afrodite
 			print ("Dump done in %g\n", timer.elapsed ());
 		}
 
-		private void dump_symbols (Vala.List<Afrodite.Symbol> symbols, string? filter_symbol)
+		private void dump_symbols (Vala.List<unowned Afrodite.Symbol> symbols, string? filter_symbol)
 		{
 			inc_pad ();
 			foreach (Symbol symbol in symbols) {
diff --git a/afrodite/astmerger.vala b/afrodite/astmerger.vala
index c9902e0..8fee913 100644
--- a/afrodite/astmerger.vala
+++ b/afrodite/astmerger.vala
@@ -68,11 +68,15 @@ namespace Afrodite
 			var source = _ast.lookup_source_file (filename);
 			if (source == null) {
 				warning ("remove_source: file not found %s", filename);
+				return;
 			}
 			if (source.has_symbols) {
 				foreach (Symbol symbol in source.symbols) {
-					if (remove_symbol (source, symbol))
-						symbol.destroy ();
+					remove_symbol (source, symbol);
+				}
+				while (source.has_symbols) {
+					var s = source.symbols.get (0);
+					source.remove_symbol (s);
 				}
 				source.symbols = null;
 			}
@@ -123,6 +127,7 @@ namespace Afrodite
 					}
 
 					if (source_ref != null) {
+						//Utils.trace ("reparenting %s", symbol.fully_qualified_name);
 						source_ref.file.add_symbol (symbol);
 						if (symbol.lookup_source_reference_filename (source_ref.file.filename) == null)
 							symbol.add_source_reference (source_ref);
@@ -133,6 +138,31 @@ namespace Afrodite
 					// orphaned without child, let's destroy it
 					if (!symbol.has_children && orphaned) {
 						removed = true;
+						if (symbol.has_resolve_targets) {
+							foreach (var target in symbol.resolve_targets) {
+								// remove from return type
+								if (target.return_type != null && target.return_type.symbol == symbol) {
+									target.return_type.symbol = null;
+								}
+								// remove from parameters
+								if (target.has_parameters) {
+									foreach (DataType type in target.parameters) {
+										if (type.symbol == symbol) {
+											type.symbol = null;
+										}
+									}
+								}
+
+								// remove from local_variables
+								if (target.has_local_variables) {
+									foreach (DataType type in target.local_variables) {
+										if (type.symbol == symbol) {
+											type.symbol = null;
+										}
+									}
+								}
+							}
+						}
 					}
 				}
 			}
@@ -149,9 +179,11 @@ namespace Afrodite
 
 			assert (parent != null);
 			if (symbol == null) {
+				//Utils.trace ("adding symbol %s", s.name);
 				symbol = add_symbol (s, out source_reference);
 				parent.add_child (symbol);
 			} else if (replace) {
+				//Utils.trace ("adding symbol %s with %s", symbol.fully_qualified_name, s.name);
 				parent.remove_child (symbol);
 				symbol = add_symbol (s, out source_reference);
 				parent.add_child (symbol);
@@ -159,6 +191,7 @@ namespace Afrodite
 				// add one more source reference to the symbol
 				source_reference = symbol.lookup_source_reference_filename (_source_file.filename);
 				if (source_reference == null)	{
+					//Utils.trace ("adding source reference %s", s.name);
 					source_reference = create_source_reference (s);
 					symbol.add_source_reference (source_reference);
 					_source_file.add_symbol (symbol);
@@ -178,6 +211,7 @@ namespace Afrodite
 				symbol.add_source_reference (source_ref);
 			}
 			symbol.access = get_vala_symbol_access (s.access);
+			//Utils.trace ("adding symbol %s to source %s", symbol.fully_qualified_name, _source_file.filename);
 			_source_file.add_symbol (symbol);
 			return symbol;
 		}
diff --git a/afrodite/completionengine.vala b/afrodite/completionengine.vala
index 54bbe0c..82e7444 100644
--- a/afrodite/completionengine.vala
+++ b/afrodite/completionengine.vala
@@ -298,7 +298,7 @@ namespace Afrodite
 										merger = new AstMerger (_ast);
 									}
 									if (source_exists) {
-										//debug ("%s: removing %s", id, source.path);
+										Utils.trace ("%s: removing %s", id, source.path);
 										merger.remove_source_filename (source.path);
 									}
 							
diff --git a/afrodite/symbol.vala b/afrodite/symbol.vala
index 7702322..5250112 100644
--- a/afrodite/symbol.vala
+++ b/afrodite/symbol.vala
@@ -95,11 +95,22 @@ namespace Afrodite
 		
 		~Symbol ()
 		{
+			//Utils.trace ("~Symbol (%d): %s", (int) this,  _fully_qualified_name ?? _name);
+			if (has_children) {
+				//remove_child (_children.get (0));
+				_children.clear ();
+				_children = null;
+			}
+
+
+			
+			resolve_targets = null;
 			if (_specialized_symbols != null) {
 				_specialized_symbols.clear ();
 				_specialized_symbols = null;
 			}
 		}
+		
 		public int static_child_count
 		{
 			get {
@@ -129,7 +140,7 @@ namespace Afrodite
 		public void add_child (Symbol child)
 		{
 			if (children == null) {
-				children = new ArrayList<Symbol> ();
+				children = new ArrayList<unowned Symbol> ();
 			}
 			
 			children.add (child);
@@ -161,12 +172,13 @@ namespace Afrodite
 		public Symbol? lookup_child (string name)
 		{
 			if (has_children) {
+				//Utils.trace ("lookup child %s (%d): %s", _fully_qualified_name, (int) this, name);
 				foreach (Symbol s in children) {
 					if (s.name == name) {
 						return s;
 					}
 				}
-			}			
+			}
 			return null;
 		}
 
@@ -268,7 +280,7 @@ namespace Afrodite
 			// resolve target collection can be accessed from multiple threads
 			lock (resolve_targets) {
 				if (resolve_targets == null) {
-					resolve_targets = new ArrayList<Symbol> ();
+					resolve_targets = new ArrayList<unowned Symbol> ();
 				}
 				resolve_targets.add (resolve_target);
 			}
@@ -470,53 +482,6 @@ namespace Afrodite
 			}
 		}
 
-		/**
-		 * This function break circular references of symbol instances
-		 *
-		 * This is a workaround for bug: https://bugzilla.gnome.org/show_bug.cgi?id=615830
-		 *
-		 * I've a better patch for this, but is seems to introduce a lot of instability
-		 * on the afrodite engine. See: 
-		 */
-		public void destroy ()
-		{
-			if (has_children) {
-				//remove_child (_children.get (0));
-				_children.clear ();
-				_children = null;
-			}
-
-			while (has_resolve_targets) {
-				var target = resolve_targets.get (0);
-				// remove from return type
-				if (target.return_type != null && target.return_type.symbol == this) {
-					target.return_type.symbol = null;
-				}
-				// remove from parameters
-				if (target.has_parameters) {
-					foreach (DataType type in target.parameters) {
-						if (type.symbol == this) {
-							type.symbol = null;
-						}
-					}
-				}
-
-				// remove from local_variables
-				if (target.has_local_variables) {
-					foreach (DataType type in target.local_variables) {
-						if (type.symbol == this) {
-							type.symbol = null;
-						}
-					}
-				}
-				remove_resolve_target (target);
-			}
-			
-			if (parent != null && parent.has_children) {
-				parent.remove_child (this);
-			}
-		}
-
 		public bool check_options (QueryOptions? options)
 		{
 			if (name != null && name.has_prefix ("*")) // vala added symbols like signal.connect or .disconnect
@@ -832,6 +797,7 @@ namespace Afrodite
 				foreach(var item in children) {
 					var s = item.copy ();
 					res.add_child (s);
+					res.add_specialized_symbol (s);
 				}
 			}
 
diff --git a/afrodite/symbolresolver.vala b/afrodite/symbolresolver.vala
index a47048a..e621128 100644
--- a/afrodite/symbolresolver.vala
+++ b/afrodite/symbolresolver.vala
@@ -81,6 +81,7 @@ namespace Afrodite
 				var curr_parent = parent;
 				for (int i = 0; i < names.length; i++) {
 					string name = names[i];
+					//Utils.trace ("parent %d", (int)curr_parent);
 					var s = curr_parent.lookup_child (name);
 					if (s != null) {
 						if (i == names.length -1) {
@@ -270,7 +271,7 @@ namespace Afrodite
 			}
 		}
 
-		private void visit_symbols (Vala.List<Afrodite.Symbol> symbols)
+		private void visit_symbols (Vala.List<unowned Afrodite.Symbol> symbols)
 		{
 			foreach (Symbol symbol in symbols) {
 				visit_symbol (symbol);
