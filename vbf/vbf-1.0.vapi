/* vbf-1.0.vapi generated by valac, do not modify. */

[CCode (cprefix = "Vbf", lower_case_cprefix = "vbf_")]
namespace Vbf {
	[CCode (cprefix = "VbfAm", lower_case_cprefix = "vbf_am_")]
	namespace Am {
		[CCode (cheader_filename = "am/vbfamprojectmanager.h")]
		public class ProjectManager : Vbf.IProjectManager, GLib.Object {
			public ProjectManager ();
		}
	}
	[CCode (cheader_filename = "vbfconfignode.h")]
	public abstract class ConfigNode : GLib.Object {
		public weak Vbf.ConfigNode parent;
		public abstract string to_string ();
	}
	[CCode (cheader_filename = "vbfconfignodelist.h")]
	public class ConfigNodeList : Vbf.ConfigNode {
		protected Gee.List<Vbf.ConfigNode> values;
		public void add_value (Vbf.ConfigNode val);
		public Gee.List<Vbf.ConfigNode> get_values ();
		public ConfigNodeList ();
		public void replace_config_node (Vbf.ConfigNode source, Vbf.ConfigNode target);
	}
	[CCode (cheader_filename = "vbfconfignodepair.h")]
	public class ConfigNodePair : GLib.Object {
		public Vbf.ConfigNode? destination;
		public Vbf.ConfigNode source;
		public ConfigNodePair (Vbf.ConfigNode source, Vbf.ConfigNode? destination);
	}
	[CCode (cheader_filename = "vbffile.h")]
	public class File : GLib.Object {
		public string filename;
		public File (string filename);
	}
	[CCode (cheader_filename = "vbfgroup.h")]
	public class Group : GLib.Object {
		public string makefile;
		public string name;
		public weak Vbf.Project project;
		public Gee.List<Vbf.Group> get_subgroups ();
		public Gee.List<Vbf.Target> get_targets ();
		public Gee.List<Vbf.Variable> get_variables ();
		public Group (Vbf.Project project, string makefile);
	}
	[CCode (cheader_filename = "vbfmodule.h")]
	public class Module : GLib.Object {
		public string name;
		public Gee.List<Vbf.Package> get_packages ();
		public Module (string name);
	}
	[CCode (cheader_filename = "vbfpackage.h")]
	public class Package : GLib.Object {
		public string constraint;
		public string name;
		public Vbf.ConfigNode version;
		public Package (string name);
	}
	[CCode (cheader_filename = "vbfproject.h")]
	public class Project : Vbf.ConfigNode {
		public string filename;
		public string name;
		public string url;
		public string version;
		public Gee.List<Vbf.Group> get_groups ();
		public Gee.List<Vbf.Module> get_modules ();
		public Gee.List<Vbf.Variable> get_variables ();
		public Project (string name);
		public signal void updated ();
	}
	[CCode (cheader_filename = "vbfsource.h")]
	public class Source : Vbf.File {
		public weak Vbf.Target target;
		public Vbf.SourceTypes type;
		public Source (Vbf.Target target, string filename);
		public Source.with_type (Vbf.Target target, string filename, Vbf.SourceTypes type);
	}
	[CCode (cheader_filename = "vbfstringliteral.h")]
	public class StringLiteral : Vbf.ConfigNode {
		public string data;
		public StringLiteral (string data);
	}
	[CCode (cheader_filename = "vbftarget.h")]
	public class Target : GLib.Object {
		public weak Vbf.Group group;
		public string name;
		public bool no_install;
		public Vbf.TargetTypes target_type;
		public Gee.List<Vbf.File> get_files ();
		public Gee.List<Vbf.Source> get_sources ();
		public Target (Vbf.Group group, Vbf.TargetTypes type, string name);
	}
	[CCode (cheader_filename = "vbfunresolvedconfignode.h")]
	public class UnresolvedConfigNode : Vbf.ConfigNode {
		public string name;
		public UnresolvedConfigNode (string name);
	}
	[CCode (cheader_filename = "vbfvariable.h")]
	public class Variable : Vbf.ConfigNode {
		public Vbf.ConfigNode? data;
		public string name;
		public void add_child (Vbf.Variable variable);
		public Gee.List<Vbf.Variable> get_childs ();
		public Vbf.ConfigNode get_value ();
		public Variable (string name, Vbf.ConfigNode parent);
	}
	[CCode (cheader_filename = "vbfiprojectmanager.h")]
	public interface IProjectManager : GLib.Object {
		public abstract Vbf.Project? open (string project_file);
		public abstract bool probe (string project_file);
	}
	[CCode (cprefix = "VBF_SOURCE_TYPES_", cheader_filename = "vbfsource.h")]
	public enum SourceTypes {
		UNKNOWN,
		VALA
	}
	[CCode (cprefix = "VBF_TARGET_TYPES_", cheader_filename = "vbftarget.h")]
	public enum TargetTypes {
		PROGRAM,
		LIBRARY,
		DATA,
		VALA_PROGRAM
	}
}
